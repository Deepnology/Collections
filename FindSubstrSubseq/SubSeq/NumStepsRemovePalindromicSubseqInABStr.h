#ifndef _NUM_STEPS_REMOVE_PALINDROMIC_SUBSEQ_IN_AB_STR_H
#define _NUM_STEPS_REMOVE_PALINDROMIC_SUBSEQ_IN_AB_STR_H
#include "Debug.h"
/*
Leetcode: Remove Palindromic Subsequences
Given a string s consisting only of letters 'a' and 'b'.
 In a single step you can remove one palindromic subsequence from s.
Return the minimum number of steps to make the given string empty.
A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing its order.
A string is called palindrome if is one that reads the same backward as well as forward.
Example 1:
Input: s = "ababa"
Output: 1
Explanation: String is already palindrome
Example 2:
Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "".
Remove palindromic subsequence "a" then "bb".
Example 3:
Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "".
Remove palindromic subsequence "baab" then "b".
Example 4:
Input: s = ""
Output: 0
 */
class NumStepsRemovePalindromicSubseqInABStr
{
public:
    int Count(std::string s)
    {
        //1. if s is empty, return 0
        //2. if s is palindrome, return 1
        //3. otherwise, return 2 (1st operation to delete all a, 2nd operation to delete all b)
        if (s.empty()) return 0;
        if (s == std::string(s.rbegin(), s.rend())) return 1;
        return 2;
    }
};
#endif
