#ifndef HOUSE_MAJORITY_H
#define HOUSE_MAJORITY_H
#include <vector>
#include <string>
#include <algorithm>
#include <iostream>
#include "Debug.h"
/*
Elements of programming interview, DynamicProgramming: Compute the probability of a Republican majority
Suppose you want to place a bet on the outcome of the coming elections.
Specifically, you are betting if the US House of Representatives will have a Democratic or a Republican majority.
A polling company has computed the probability of winning for each candidate in the 435 individual elections.
You are interested in just one number--what is the probability that the Republican party is going to have a majority in the House?

Assuming elections are statistically independent and that the probability of a Republican winning Election i is pi, how would you compute the probability of a Republican majority?

Input: an array of probabilities of Republican winning individual elections. Array size is the total number of elections.

*/
class HouseMajority
{
public:
	HouseMajority(){}
	~HouseMajority(){}

	double Simplified_Recur(const std::vector<double> & v)//better
	{
		int N = v.size();
		std::vector<std::vector<double>> dp(N + 1, std::vector<double>(N + 1, -1.0));
		double prob = 0.0;

		//accumulate the prob of "countWin wins from N elections", where countWin is at least N/2
		for (int countWin = (int)std::ceil(0.5*N); countWin <= N; ++countWin)
			prob += this->simplified_recur(v, countWin, N, dp);

		Debug::Print2D<double>()(dp, false);
		std::cout << "HouseMajority Simplified_Recur for \"" << Debug::ToStr1D<double>()(v) << "\": " << prob << std::endl;
		return prob;
	}
private:
	double simplified_recur(const std::vector<double> & v, int countWin, int N, std::vector<std::vector<double> > & dp)//countWin wins from N elections
	{
		if (countWin < 0) return 0.0;
		if (N == 0)
		{
			if (countWin == 0) return dp[countWin][N] = 1.0;//0 wins from 0 elections: prob must be 1
			else return dp[countWin][N] = 0.0;//non-0 wins from 0 elections: prob must be 0
		}

		if (dp[countWin][N] != -1.0)
			return dp[countWin][N];

		double winProb = this->simplified_recur(v, countWin - 1, N - 1, dp) * v[N - 1];//(countWin-1 wins from N-1 elections) * cur election win prob
		double loseProb = this->simplified_recur(v, countWin, N - 1, dp) * (1.0 - v[N - 1]);//(countWin wins from N-1 elections) * cur election lose prob
		return dp[countWin][N] = winProb + loseProb;
	}

public:
	double ProbOfRepublicanMajority_Recur(const std::vector<double> & probRepublicanWin)
	{
		int numElections = probRepublicanWin.size();
		std::vector<std::vector<double> > dp(numElections + 1, std::vector<double>(numElections + 1, -1.0));

		//accumulate the prob from the case of "Republican wins half of the individual elections" to the case of "Republican wins all of the individual elections"
		//each case where "the number of Republican wins is greater than half of all the elections", is a way to achieve Republican majority
		double accumulatedProb = 0.0;
		for (int numRepublicanWins = (int)std::ceil(0.5*numElections); numRepublicanWins <= numElections; ++numRepublicanWins)
			accumulatedProb += this->recur(probRepublicanWin, numRepublicanWins, numElections, dp);

		Debug::Print2D<double>()(dp, false);
		std::cout << "HouseMajority ProbOfRepublicanMajority_Recur for \"" << Debug::ToStr1D<double>()(probRepublicanWin) << "\": " << accumulatedProb << std::endl;
		return accumulatedProb;
	}
private:
	double recur(const std::vector<double> & prob, int numRepublicanWins, int numElections, std::vector<std::vector<double> > & dp)
	{
		if (numRepublicanWins > numElections)
			return 0.0;
		if (numRepublicanWins == 0 && numElections == 0)//0 wins from 0 elections: prob must be 1
			return 1.0;//base case
		if (numRepublicanWins < 0)
			return 0.0;

		if (dp[numRepublicanWins][numElections] != -1.0)
			return dp[numRepublicanWins][numElections];

		double probRepublicanWinCurElection = this->recur(prob, numRepublicanWins - 1, numElections - 1, dp) * prob[numElections - 1];//(numRepublicanWins-1) wins from (numElections-1) elections + current win in current election = "numRepublicanWins wins from numElections elections"
		double probRepublicanLoseCurElection = this->recur(prob, numRepublicanWins, numElections - 1, dp) * (1.0 - prob[numElections - 1]);//numRepublicanWins wins from (numElections-1) elections + current lose in current election = "numRepublicanWins wins from numElections elections"
		return dp[numRepublicanWins][numElections] = probRepublicanWinCurElection + probRepublicanLoseCurElection;
	}
};
/*
[rY][cX]
Row#0	= -1, 0.510065, 0.409667, 0.0428167, 0.0399303, 0.0157746, 0.00619716, 0.00511252, 0.00379721, 0.00324335, 0.000537687, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
Row#1	= -1, 0.489935, 0.493898, 0.41847, 0.393146, 0.17947, 0.0800833, 0.0671516, 0.0511907, 0.0442778, 0.0100461, 0.00174826, -1, -1, -1, -1, -1, -1, -1, -1, -1
Row#2	= -1, -1, 0.0964358, 0.452356, 0.450072, 0.415635, 0.272249, 0.238616, 0.194503, 0.173599, 0.0657168, 0.0171339, 0.0115397, -1, -1, -1, -1, -1, -1, -1, -1
Row#3	= -1, -1, -1, 0.0863567, 0.11103, 0.316132, 0.376545, 0.358291, 0.327502, 0.308102, 0.195897, 0.0822909, 0.0585999, 0.0264498, -1, -1, -1, -1, -1, -1, -1
Row#4	= -1, -1, -1, -1, 0.00582157, 0.0694669, 0.219228, 0.246762, 0.275455, 0.283047, 0.303948, 0.209654, 0.163345, 0.0917863, 0.07535, -1, -1, -1, -1, -1, -1
Row#5	= -1, -1, -1, -1, -1, 0.00352174, 0.0435599, 0.0743057, 0.118674, 0.141542, 0.259588, 0.298301, 0.266069, 0.195891, 0.169702, 0.166357, -1, -1, -1, -1, -1
Row#6	= -1, -1, -1, -1, -1, -1, 0.0021382, 0.00938791, 0.0260894, 0.0395939, 0.124641, 0.242407, 0.26273, 0.265011, 0.247623, 0.24486, 0.173037, -1, -1, -1, -1
Row#7	= -1, -1, -1, -1, -1, -1, -1, 0.000374232, 0.0026932, 0.00610581, 0.0340422, 0.113106, 0.16012, 0.23022, 0.238972, 0.239279, 0.244385, 0.184573, -1, -1, -1
Row#8	= -1, -1, -1, -1, -1, -1, -1, -1, 9.62792e-05, 0.00047507, 0.00517234, 0.0303666, 0.0604507, 0.128542, 0.15412, 0.157128, 0.232288, 0.24243, 0.199664, -1, -1
Row#9	= -1, -1, -1, -1, -1, -1, -1, -1, -1, 1.40435e-05, 0.000398641, 0.00456457, 0.0139462, 0.0457166, 0.0665523, 0.0696567, 0.149685, 0.218933, 0.236301, 0.20886, -1
Row#10	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1.17153e-05, 0.000349379, 0.00188202, 0.0101239, 0.0190777, 0.0207607, 0.0654961, 0.136073, 0.19732, 0.226516, 0.216508
Row#11	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1.02238e-05, 0.00013354, 0.00132805, 0.00354075, 0.00409155, 0.0193423, 0.0580337, 0.115718, 0.176837, 0.204998
Row#12	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3.71735e-06, 9.24083e-05, 0.000403249, 0.000514477, 0.00378718, 0.0168273, 0.0472856, 0.0985406, 0.142923
Row#13	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2.53958e-06, 2.51472e-05, 3.85514e-05, 0.00047398, 0.00325148, 0.0132862, 0.0387515, 0.0726429
Row#14	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6.38864e-07, 1.50771e-06, 3.53993e-05, 0.000403068, 0.00250851, 0.0105809, 0.0265494
Row#15	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2.26485e-08, 1.38135e-06, 2.98991e-05, 0.000305732, 0.0019556, 0.00684486
Row#16	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2.07213e-08, 1.16136e-06, 2.24032e-05, 0.000234614, 0.00121015
Row#17	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1.7371e-08, 8.62963e-07, 1.69965e-05, 0.000140353
Row#18	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1.284e-08, 6.49575e-07, 9.91578e-06
Row#19	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9.61706e-09, 3.72376e-07
Row#20	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5.45142e-09

HouseMajority ProbOfRepublicanMajority_Recur for "0.489935, 0.196834, 0.895484, 0.0674131, 0.604946, 0.607143, 0.175022, 0.257272, 0.145862, 0.834219, 0.872683, 0.363599, 0.68317, 0.251563, 0.0354512, 0.914909, 0.838315, 0.739164, 0.748992, 0.566849": 0.671826
[rY][cX]
Row#0	= -1, 0.510065, 0.409667, 0.0428167, 0.0399303, 0.0157746, 0.00619716, 0.00511252, 0.00379721, 0.00324335, 0.000537687, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
Row#1	= -1, 0.489935, 0.493898, 0.41847, 0.393146, 0.17947, 0.0800833, 0.0671516, 0.0511907, 0.0442778, 0.0100461, 0.00174826, -1, -1, -1, -1, -1, -1, -1, -1, -1
Row#2	= -1, -1, 0.0964358, 0.452356, 0.450072, 0.415635, 0.272249, 0.238616, 0.194503, 0.173599, 0.0657168, 0.0171339, 0.0115397, -1, -1, -1, -1, -1, -1, -1, -1
Row#3	= -1, -1, -1, 0.0863567, 0.11103, 0.316132, 0.376545, 0.358291, 0.327502, 0.308102, 0.195897, 0.0822909, 0.0585999, 0.0264498, -1, -1, -1, -1, -1, -1, -1
Row#4	= -1, -1, -1, -1, 0.00582157, 0.0694669, 0.219228, 0.246762, 0.275455, 0.283047, 0.303948, 0.209654, 0.163345, 0.0917863, 0.07535, -1, -1, -1, -1, -1, -1
Row#5	= -1, -1, -1, -1, -1, 0.00352174, 0.0435599, 0.0743057, 0.118674, 0.141542, 0.259588, 0.298301, 0.266069, 0.195891, 0.169702, 0.166357, -1, -1, -1, -1, -1
Row#6	= -1, -1, -1, -1, -1, -1, 0.0021382, 0.00938791, 0.0260894, 0.0395939, 0.124641, 0.242407, 0.26273, 0.265011, 0.247623, 0.24486, 0.173037, -1, -1, -1, -1
Row#7	= -1, -1, -1, -1, -1, -1, -1, 0.000374232, 0.0026932, 0.00610581, 0.0340422, 0.113106, 0.16012, 0.23022, 0.238972, 0.239279, 0.244385, 0.184573, -1, -1, -1
Row#8	= -1, -1, -1, -1, -1, -1, -1, -1, 9.62792e-05, 0.00047507, 0.00517234, 0.0303666, 0.0604507, 0.128542, 0.15412, 0.157128, 0.232288, 0.24243, 0.199664, -1, -1
Row#9	= -1, -1, -1, -1, -1, -1, -1, -1, -1, 1.40435e-05, 0.000398641, 0.00456457, 0.0139462, 0.0457166, 0.0665523, 0.0696567, 0.149685, 0.218933, 0.236301, 0.20886, -1
Row#10	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1.17153e-05, 0.000349379, 0.00188202, 0.0101239, 0.0190777, 0.0207607, 0.0654961, 0.136073, 0.19732, 0.226516, 0.216508
Row#11	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1.02238e-05, 0.00013354, 0.00132805, 0.00354075, 0.00409155, 0.0193423, 0.0580337, 0.115718, 0.176837, 0.204998
Row#12	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3.71735e-06, 9.24083e-05, 0.000403249, 0.000514477, 0.00378718, 0.0168273, 0.0472856, 0.0985406, 0.142923
Row#13	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2.53958e-06, 2.51472e-05, 3.85514e-05, 0.00047398, 0.00325148, 0.0132862, 0.0387515, 0.0726429
Row#14	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6.38864e-07, 1.50771e-06, 3.53993e-05, 0.000403068, 0.00250851, 0.0105809, 0.0265494
Row#15	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2.26485e-08, 1.38135e-06, 2.98991e-05, 0.000305732, 0.0019556, 0.00684486
Row#16	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2.07213e-08, 1.16136e-06, 2.24032e-05, 0.000234614, 0.00121015
Row#17	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1.7371e-08, 8.62963e-07, 1.69965e-05, 0.000140353
Row#18	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1.284e-08, 6.49575e-07, 9.91578e-06
Row#19	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9.61706e-09, 3.72376e-07
Row#20	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5.45142e-09

HouseMajority Simplified_Recur for "0.489935, 0.196834, 0.895484, 0.0674131, 0.604946, 0.607143, 0.175022, 0.257272, 0.145862, 0.834219, 0.872683, 0.363599, 0.68317, 0.251563, 0.0354512, 0.914909, 0.838315, 0.739164, 0.748992, 0.566849": 0.671826
[rY][cX]
Row#0	= -1, 0.398828, 0.271999, 0.0810846, 0.0472018, 0.0234393, 0.010386, 0.0092471, 0.00892612, 0.00415894, 0.00101701, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
Row#1	= -1, 0.601172, 0.536826, 0.350945, 0.238179, 0.142037, 0.0759901, 0.0687959, 0.0667289, 0.0358581, 0.0119105, 0.00731605, -1, -1, -1, -1, -1, -1, -1, -1, -1
Row#2	= -1, -1, 0.191176, 0.433785, 0.399169, 0.318123, 0.220061, 0.204262, 0.19956, 0.128619, 0.0585413, 0.0388743, 0.0133115, -1, -1, -1, -1, -1, -1, -1, -1
Row#3	= -1, -1, -1, 0.134185, 0.259379, 0.329752, 0.323276, 0.311957, 0.308219, 0.250187, 0.158346, 0.116253, 0.0535747, 0.040569, -1, -1, -1, -1, -1, -1, -1
Row#4	= -1, -1, -1, -1, 0.0560719, 0.158421, 0.253835, 0.26145, 0.263203, 0.287245, 0.259249, 0.216692, 0.135334, 0.108924, 0.0924407, -1, -1, -1, -1, -1, -1
Row#5	= -1, -1, -1, -1, -1, 0.0282278, 0.100732, 0.117522, 0.122517, 0.197654, 0.265337, 0.262769, 0.225446, 0.196338, 0.175259, 0.173926, -1, -1, -1, -1, -1
Row#6	= -1, -1, -1, -1, -1, -1, 0.01572, 0.0250425, 0.0282525, 0.0785967, 0.16854, 0.209365, 0.252623, 0.243845, 0.232389, 0.231469, 0.221764, -1, -1, -1, -1
Row#7	= -1, -1, -1, -1, -1, -1, -1, 0.00172387, 0.00253328, 0.0162692, 0.0633554, 0.107718, 0.190054, 0.210265, 0.218363, 0.218588, 0.220761, 0.221412, -1, -1, -1
Row#8	= -1, -1, -1, -1, -1, -1, -1, -1, 5.98369e-05, 0.00138083, 0.0126285, 0.0340231, 0.0937175, 0.124836, 0.145437, 0.14661, 0.158751, 0.199003, 0.203842, -1, -1
Row#9	= -1, -1, -1, -1, -1, -1, -1, -1, -1, 3.19572e-05, 0.00105098, 0.00593392, 0.0286867, 0.0496928, 0.0678133, 0.0690624, 0.0821421, 0.131871, 0.146368, 0.154705, -1
Row#10	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2.41425e-05, 0.000457225, 0.00489345, 0.0125791, 0.021529, 0.0222737, 0.0301654, 0.0639048, 0.0785825, 0.0884145, 0.148298
Row#11	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1.01824e-05, 0.000372295, 0.00183271, 0.00442417, 0.0046994, 0.00766359, 0.0222701, 0.0312614, 0.0381251, 0.0835542
Row#12	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8.2479e-06, 0.000125842, 0.000537448, 0.000599988, 0.00129142, 0.00542777, 0.00906497, 0.0122845, 0.0356277
Row#13	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2.66422e-06, 3.23681e-05, 4.04952e-05, 0.000134863, 0.000885615, 0.00186652, 0.00291062, 0.0113785
Row#14	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6.42469e-07, 1.15296e-06, 7.78867e-06, 9.02758e-05, 0.000262034, 0.000494757, 0.00267714
Row#15	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1.03378e-08, 2.03059e-07, 5.12708e-06, 2.35155e-05, 5.81115e-05, 0.000452557
Row#16	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1.74364e-09, 1.32423e-07, 1.21105e-06, 4.4462e-06, 5.29249e-05
Row#17	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1.13185e-09, 2.9485e-08, 2.00866e-07, 4.0359e-06
Row#18	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2.44429e-10, 4.48564e-09, 1.81886e-07
Row#19	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3.54533e-11, 4.05554e-09
Row#20	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3.20268e-11

HouseMajority ProbOfRepublicanMajority_Recur for "0.601172, 0.318005, 0.701894, 0.41787, 0.503423, 0.556897, 0.109661, 0.0347107, 0.534071, 0.755465, 0.421761, 0.810018, 0.323018, 0.241147, 0.0160908, 0.168666, 0.649127, 0.215956, 0.145045, 0.903353": 0.282045
[rY][cX]
Row#0	= -1, 0.398828, 0.271999, 0.0810846, 0.0472018, 0.0234393, 0.010386, 0.0092471, 0.00892612, 0.00415894, 0.00101701, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
Row#1	= -1, 0.601172, 0.536826, 0.350945, 0.238179, 0.142037, 0.0759901, 0.0687959, 0.0667289, 0.0358581, 0.0119105, 0.00731605, -1, -1, -1, -1, -1, -1, -1, -1, -1
Row#2	= -1, -1, 0.191176, 0.433785, 0.399169, 0.318123, 0.220061, 0.204262, 0.19956, 0.128619, 0.0585413, 0.0388743, 0.0133115, -1, -1, -1, -1, -1, -1, -1, -1
Row#3	= -1, -1, -1, 0.134185, 0.259379, 0.329752, 0.323276, 0.311957, 0.308219, 0.250187, 0.158346, 0.116253, 0.0535747, 0.040569, -1, -1, -1, -1, -1, -1, -1
Row#4	= -1, -1, -1, -1, 0.0560719, 0.158421, 0.253835, 0.26145, 0.263203, 0.287245, 0.259249, 0.216692, 0.135334, 0.108924, 0.0924407, -1, -1, -1, -1, -1, -1
Row#5	= -1, -1, -1, -1, -1, 0.0282278, 0.100732, 0.117522, 0.122517, 0.197654, 0.265337, 0.262769, 0.225446, 0.196338, 0.175259, 0.173926, -1, -1, -1, -1, -1
Row#6	= -1, -1, -1, -1, -1, -1, 0.01572, 0.0250425, 0.0282525, 0.0785967, 0.16854, 0.209365, 0.252623, 0.243845, 0.232389, 0.231469, 0.221764, -1, -1, -1, -1
Row#7	= -1, -1, -1, -1, -1, -1, -1, 0.00172387, 0.00253328, 0.0162692, 0.0633554, 0.107718, 0.190054, 0.210265, 0.218363, 0.218588, 0.220761, 0.221412, -1, -1, -1
Row#8	= -1, -1, -1, -1, -1, -1, -1, -1, 5.98369e-05, 0.00138083, 0.0126285, 0.0340231, 0.0937175, 0.124836, 0.145437, 0.14661, 0.158751, 0.199003, 0.203842, -1, -1
Row#9	= -1, -1, -1, -1, -1, -1, -1, -1, -1, 3.19572e-05, 0.00105098, 0.00593392, 0.0286867, 0.0496928, 0.0678133, 0.0690624, 0.0821421, 0.131871, 0.146368, 0.154705, -1
Row#10	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2.41425e-05, 0.000457225, 0.00489345, 0.0125791, 0.021529, 0.0222737, 0.0301654, 0.0639048, 0.0785825, 0.0884145, 0.148298
Row#11	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1.01824e-05, 0.000372295, 0.00183271, 0.00442417, 0.0046994, 0.00766359, 0.0222701, 0.0312614, 0.0381251, 0.0835542
Row#12	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8.2479e-06, 0.000125842, 0.000537448, 0.000599988, 0.00129142, 0.00542777, 0.00906497, 0.0122845, 0.0356277
Row#13	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2.66422e-06, 3.23681e-05, 4.04952e-05, 0.000134863, 0.000885615, 0.00186652, 0.00291062, 0.0113785
Row#14	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6.42469e-07, 1.15296e-06, 7.78867e-06, 9.02758e-05, 0.000262034, 0.000494757, 0.00267714
Row#15	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1.03378e-08, 2.03059e-07, 5.12708e-06, 2.35155e-05, 5.81115e-05, 0.000452557
Row#16	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1.74364e-09, 1.32423e-07, 1.21105e-06, 4.4462e-06, 5.29249e-05
Row#17	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1.13185e-09, 2.9485e-08, 2.00866e-07, 4.0359e-06
Row#18	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2.44429e-10, 4.48564e-09, 1.81886e-07
Row#19	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3.54533e-11, 4.05554e-09
Row#20	= -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3.20268e-11

HouseMajority Simplified_Recur for "0.601172, 0.318005, 0.701894, 0.41787, 0.503423, 0.556897, 0.109661, 0.0347107, 0.534071, 0.755465, 0.421761, 0.810018, 0.323018, 0.241147, 0.0160908, 0.168666, 0.649127, 0.215956, 0.145045, 0.903353": 0.282045
*/
#endif